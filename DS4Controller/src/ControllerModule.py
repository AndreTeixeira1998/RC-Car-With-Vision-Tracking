# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ControllerModule', [dirname(__file__)])
        except ImportError:
            import _ControllerModule
            return _ControllerModule
        if fp is not None:
            try:
                _mod = imp.load_module('_ControllerModule', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ControllerModule = swig_import_helper()
    del swig_import_helper
else:
    import _ControllerModule
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class controllerobj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, controllerobj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, controllerobj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _ControllerModule.controllerobj_name_set
    __swig_getmethods__["name"] = _ControllerModule.controllerobj_name_get
    if _newclass:
        name = _swig_property(_ControllerModule.controllerobj_name_get, _ControllerModule.controllerobj_name_set)
    __swig_setmethods__["version"] = _ControllerModule.controllerobj_version_set
    __swig_getmethods__["version"] = _ControllerModule.controllerobj_version_get
    if _newclass:
        version = _swig_property(_ControllerModule.controllerobj_version_get, _ControllerModule.controllerobj_version_set)
    __swig_setmethods__["numAxis"] = _ControllerModule.controllerobj_numAxis_set
    __swig_getmethods__["numAxis"] = _ControllerModule.controllerobj_numAxis_get
    if _newclass:
        numAxis = _swig_property(_ControllerModule.controllerobj_numAxis_get, _ControllerModule.controllerobj_numAxis_set)
    __swig_setmethods__["numButtons"] = _ControllerModule.controllerobj_numButtons_set
    __swig_getmethods__["numButtons"] = _ControllerModule.controllerobj_numButtons_get
    if _newclass:
        numButtons = _swig_property(_ControllerModule.controllerobj_numButtons_get, _ControllerModule.controllerobj_numButtons_set)
    __swig_setmethods__["thread"] = _ControllerModule.controllerobj_thread_set
    __swig_getmethods__["thread"] = _ControllerModule.controllerobj_thread_get
    if _newclass:
        thread = _swig_property(_ControllerModule.controllerobj_thread_get, _ControllerModule.controllerobj_thread_set)
    __swig_setmethods__["active"] = _ControllerModule.controllerobj_active_set
    __swig_getmethods__["active"] = _ControllerModule.controllerobj_active_get
    if _newclass:
        active = _swig_property(_ControllerModule.controllerobj_active_get, _ControllerModule.controllerobj_active_set)
    __swig_setmethods__["mode"] = _ControllerModule.controllerobj_mode_set
    __swig_getmethods__["mode"] = _ControllerModule.controllerobj_mode_get
    if _newclass:
        mode = _swig_property(_ControllerModule.controllerobj_mode_get, _ControllerModule.controllerobj_mode_set)

    def __init__(self):
        this = _ControllerModule.new_controllerobj()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ControllerModule.delete_controllerobj
    __del__ = lambda self: None
controllerobj_swigregister = _ControllerModule.controllerobj_swigregister
controllerobj_swigregister(controllerobj)


_ControllerModule.BTN_SQUARE_swigconstant(_ControllerModule)
BTN_SQUARE = _ControllerModule.BTN_SQUARE

_ControllerModule.BTN_CROSS_swigconstant(_ControllerModule)
BTN_CROSS = _ControllerModule.BTN_CROSS

_ControllerModule.BTN_CIRCLE_swigconstant(_ControllerModule)
BTN_CIRCLE = _ControllerModule.BTN_CIRCLE

_ControllerModule.BTN_TRIANGLE_swigconstant(_ControllerModule)
BTN_TRIANGLE = _ControllerModule.BTN_TRIANGLE

_ControllerModule.BTN_L1_swigconstant(_ControllerModule)
BTN_L1 = _ControllerModule.BTN_L1

_ControllerModule.BTN_R1_swigconstant(_ControllerModule)
BTN_R1 = _ControllerModule.BTN_R1

_ControllerModule.BTN_L2_swigconstant(_ControllerModule)
BTN_L2 = _ControllerModule.BTN_L2

_ControllerModule.BTN_R2_swigconstant(_ControllerModule)
BTN_R2 = _ControllerModule.BTN_R2

_ControllerModule.BTN_SHARE_swigconstant(_ControllerModule)
BTN_SHARE = _ControllerModule.BTN_SHARE

_ControllerModule.BTN_OPTIONS_swigconstant(_ControllerModule)
BTN_OPTIONS = _ControllerModule.BTN_OPTIONS

_ControllerModule.BTN_LEFT_STICK_swigconstant(_ControllerModule)
BTN_LEFT_STICK = _ControllerModule.BTN_LEFT_STICK

_ControllerModule.BTN_RIGHT_STICK_swigconstant(_ControllerModule)
BTN_RIGHT_STICK = _ControllerModule.BTN_RIGHT_STICK

_ControllerModule.AXIS_LEFT_STICK_X_swigconstant(_ControllerModule)
AXIS_LEFT_STICK_X = _ControllerModule.AXIS_LEFT_STICK_X

_ControllerModule.AXIS_LEFT_STICK_Y_swigconstant(_ControllerModule)
AXIS_LEFT_STICK_Y = _ControllerModule.AXIS_LEFT_STICK_Y

_ControllerModule.AXIS_RIGHT_STICK_X_swigconstant(_ControllerModule)
AXIS_RIGHT_STICK_X = _ControllerModule.AXIS_RIGHT_STICK_X

_ControllerModule.AXIS_L2_swigconstant(_ControllerModule)
AXIS_L2 = _ControllerModule.AXIS_L2

_ControllerModule.AXIS_R2_swigconstant(_ControllerModule)
AXIS_R2 = _ControllerModule.AXIS_R2

_ControllerModule.AXIS_RIGHT_STICK_Y_swigconstant(_ControllerModule)
AXIS_RIGHT_STICK_Y = _ControllerModule.AXIS_RIGHT_STICK_Y

_ControllerModule.AXIS_LEFT_DPAD_swigconstant(_ControllerModule)
AXIS_LEFT_DPAD = _ControllerModule.AXIS_LEFT_DPAD

_ControllerModule.AXIS_RIGHT_DPAD_swigconstant(_ControllerModule)
AXIS_RIGHT_DPAD = _ControllerModule.AXIS_RIGHT_DPAD

_ControllerModule.AXIS_UP_DPAD_swigconstant(_ControllerModule)
AXIS_UP_DPAD = _ControllerModule.AXIS_UP_DPAD

_ControllerModule.AXIS_DOWN_DPAD_swigconstant(_ControllerModule)
AXIS_DOWN_DPAD = _ControllerModule.AXIS_DOWN_DPAD

def Initialize(arg1):
    return _ControllerModule.Initialize(arg1)
Initialize = _ControllerModule.Initialize

def Loop(arg1):
    return _ControllerModule.Loop(arg1)
Loop = _ControllerModule.Loop

def shutDown(arg1):
    return _ControllerModule.shutDown(arg1)
shutDown = _ControllerModule.shutDown

def getKeyDown(arg1):
    return _ControllerModule.getKeyDown(arg1)
getKeyDown = _ControllerModule.getKeyDown

def getAxisDown(arg1):
    return _ControllerModule.getAxisDown(arg1)
getAxisDown = _ControllerModule.getAxisDown

def getAxisValue(arg1):
    return _ControllerModule.getAxisValue(arg1)
getAxisValue = _ControllerModule.getAxisValue

def getControllerName(arg1):
    return _ControllerModule.getControllerName(arg1)
getControllerName = _ControllerModule.getControllerName

def deviceInfo(arg1):
    return _ControllerModule.deviceInfo(arg1)
deviceInfo = _ControllerModule.deviceInfo

def newControllerOBJ():
    return _ControllerModule.newControllerOBJ()
newControllerOBJ = _ControllerModule.newControllerOBJ
# This file is compatible with both classic and new-style classes.


