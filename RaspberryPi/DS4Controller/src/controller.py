# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_controller', [dirname(__file__)])
        except ImportError:
            import _controller
            return _controller
        if fp is not None:
            try:
                _mod = imp.load_module('_controller', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _controller = swig_import_helper()
    del swig_import_helper
else:
    import _controller
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class controller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, controller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, controller, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _controller.controller_name_set
    __swig_getmethods__["name"] = _controller.controller_name_get
    if _newclass:
        name = _swig_property(_controller.controller_name_get, _controller.controller_name_set)
    __swig_setmethods__["version"] = _controller.controller_version_set
    __swig_getmethods__["version"] = _controller.controller_version_get
    if _newclass:
        version = _swig_property(_controller.controller_version_get, _controller.controller_version_set)
    __swig_setmethods__["numAxis"] = _controller.controller_numAxis_set
    __swig_getmethods__["numAxis"] = _controller.controller_numAxis_get
    if _newclass:
        numAxis = _swig_property(_controller.controller_numAxis_get, _controller.controller_numAxis_set)
    __swig_setmethods__["numButtons"] = _controller.controller_numButtons_set
    __swig_getmethods__["numButtons"] = _controller.controller_numButtons_get
    if _newclass:
        numButtons = _swig_property(_controller.controller_numButtons_get, _controller.controller_numButtons_set)
    __swig_setmethods__["thread"] = _controller.controller_thread_set
    __swig_getmethods__["thread"] = _controller.controller_thread_get
    if _newclass:
        thread = _swig_property(_controller.controller_thread_get, _controller.controller_thread_set)
    __swig_setmethods__["active"] = _controller.controller_active_set
    __swig_getmethods__["active"] = _controller.controller_active_get
    if _newclass:
        active = _swig_property(_controller.controller_active_get, _controller.controller_active_set)
    __swig_setmethods__["mode"] = _controller.controller_mode_set
    __swig_getmethods__["mode"] = _controller.controller_mode_get
    if _newclass:
        mode = _swig_property(_controller.controller_mode_get, _controller.controller_mode_set)

    def __init__(self):
        this = _controller.new_controller()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _controller.delete_controller
    __del__ = lambda self: None
controller_swigregister = _controller.controller_swigregister
controller_swigregister(controller)


_controller.BTN_SQUARE_swigconstant(_controller)
BTN_SQUARE = _controller.BTN_SQUARE

_controller.BTN_CROSS_swigconstant(_controller)
BTN_CROSS = _controller.BTN_CROSS

_controller.BTN_CIRCLE_swigconstant(_controller)
BTN_CIRCLE = _controller.BTN_CIRCLE

_controller.BTN_TRIANGLE_swigconstant(_controller)
BTN_TRIANGLE = _controller.BTN_TRIANGLE

_controller.BTN_L1_swigconstant(_controller)
BTN_L1 = _controller.BTN_L1

_controller.BTN_R1_swigconstant(_controller)
BTN_R1 = _controller.BTN_R1

_controller.BTN_L2_swigconstant(_controller)
BTN_L2 = _controller.BTN_L2

_controller.BTN_R2_swigconstant(_controller)
BTN_R2 = _controller.BTN_R2

_controller.BTN_SHARE_swigconstant(_controller)
BTN_SHARE = _controller.BTN_SHARE

_controller.BTN_OPTIONS_swigconstant(_controller)
BTN_OPTIONS = _controller.BTN_OPTIONS

_controller.BTN_LEFT_STICK_swigconstant(_controller)
BTN_LEFT_STICK = _controller.BTN_LEFT_STICK

_controller.BTN_RIGHT_STICK_swigconstant(_controller)
BTN_RIGHT_STICK = _controller.BTN_RIGHT_STICK

_controller.BTN_PS_swigconstant(_controller)
BTN_PS = _controller.BTN_PS

_controller.AXIS_LEFT_STICK_X_swigconstant(_controller)
AXIS_LEFT_STICK_X = _controller.AXIS_LEFT_STICK_X

_controller.AXIS_LEFT_STICK_Y_swigconstant(_controller)
AXIS_LEFT_STICK_Y = _controller.AXIS_LEFT_STICK_Y

_controller.AXIS_RIGHT_STICK_X_swigconstant(_controller)
AXIS_RIGHT_STICK_X = _controller.AXIS_RIGHT_STICK_X

_controller.AXIS_L2_swigconstant(_controller)
AXIS_L2 = _controller.AXIS_L2

_controller.AXIS_R2_swigconstant(_controller)
AXIS_R2 = _controller.AXIS_R2

_controller.AXIS_RIGHT_STICK_Y_swigconstant(_controller)
AXIS_RIGHT_STICK_Y = _controller.AXIS_RIGHT_STICK_Y

_controller.AXIS_LEFT_DPAD_swigconstant(_controller)
AXIS_LEFT_DPAD = _controller.AXIS_LEFT_DPAD

_controller.AXIS_RIGHT_DPAD_swigconstant(_controller)
AXIS_RIGHT_DPAD = _controller.AXIS_RIGHT_DPAD

_controller.AXIS_UP_DPAD_swigconstant(_controller)
AXIS_UP_DPAD = _controller.AXIS_UP_DPAD

_controller.AXIS_DOWN_DPAD_swigconstant(_controller)
AXIS_DOWN_DPAD = _controller.AXIS_DOWN_DPAD

def Initialize(arg1):
    return _controller.Initialize(arg1)
Initialize = _controller.Initialize

def Loop(arg1):
    return _controller.Loop(arg1)
Loop = _controller.Loop

def shutDown(arg1):
    return _controller.shutDown(arg1)
shutDown = _controller.shutDown

def getButtonDown(arg1):
    return _controller.getButtonDown(arg1)
getButtonDown = _controller.getButtonDown

def getAxisDown(arg1):
    return _controller.getAxisDown(arg1)
getAxisDown = _controller.getAxisDown

def getAxisValue(arg1):
    return _controller.getAxisValue(arg1)
getAxisValue = _controller.getAxisValue

def getControllerName(arg1):
    return _controller.getControllerName(arg1)
getControllerName = _controller.getControllerName

def deviceInfo(arg1):
    return _controller.deviceInfo(arg1)
deviceInfo = _controller.deviceInfo

def newController():
    return _controller.newController()
newController = _controller.newController
# This file is compatible with both classic and new-style classes.


